from ndn import Node
import time
from topology import nodes, running_nodes
# from multiprocessing import Process
from threading import Thread
from crypto import CryptoLayer

node_objects = {}

def node_proc(nodes, node_id):
    '''
    1. for loop to iterate over peers' ip and ports
    

    this will create and start a single Node object
    '''
    ndn_privatekey = CryptoLayer.loadPrivateKey("ndn.pem")

    peer_details = []
    for peer_nodeid in nodes[node_id]["peers"]:
        peer = (nodes[peer_nodeid]["server_IP"], int(nodes[peer_nodeid]["server_port"]))
        peer_details.append(peer)

    node = Node(node_id, nodes[node_id]["server_IP"], nodes[node_id]["server_port"], ndn_privatekey)
    node_objects[node_id] = node # saving object to access it
    node.start(peer_details)

def main():
    for node_id in running_nodes:
        proc = Thread(target=node_proc, args=(nodes, node_id))
        proc.start()


    def menu():
        print("OPTIONS\n0. Print Menu")
        print("1. Send Interest Packet")
        print("2. Display FIB")
        print("3. Display PIT")
        print("4. Display PRT")
        print("5. Display Logs")
        print("6. View sensor data generated by node")
        print("7. List Nodes")
        print("8. Stop a node")
        print("9. Start a node")
        print("10. Display Cache")
        print("11. Display keys")
        print("12. Exit")

    menu()

    while True:
        user_input = input("Enter: ")

        if user_input == '0':
            menu()
        if user_input == "1":
            nodeID = input("Source nodeID: ")
            dataID = input("DataID: ")
            node_objects[int(nodeID)].ndn.send_interest(dataID, 1) # "/data/3/heartrate"
            time.sleep(2)
        elif user_input == "2":
            nodeID = input("Source nodeID: ")
            print(node_objects[int(nodeID)].ndn.fib)
        elif user_input == "3":
            nodeID = input("Source nodeID: ")
            print(node_objects[int(nodeID)].ndn.pit)
        elif user_input == "4":
            nodeID = input("Source nodeID: ")
            print(node_objects[int(nodeID)].ndn.prt)
        elif user_input == "5":
            nodeID = input("Source nodeID: ")
            print("---------------------LOGS-----------------------------")
            print("\n****Displaying Hello Packet Logs****\n")
            print(*node_objects[int(nodeID)].ndn.hellologs, sep="\n")
            print("\n****Displaying Interest packet Logs****\n")
            print(*node_objects[int(nodeID)].ndn.interestlogs,sep="\n")
            print("\n****Displaying Data packet Logs****\n")
            print(*node_objects[int(nodeID)].ndn.datalogs, sep="\n")
            print("-------------------------------------------------------")
        elif user_input == "6":
            nodeID = input("Source nodeID: ")
            print(node_objects[int(nodeID)].supportedDataID)
        elif user_input == "7":
            nodeID = input("Source nodeID: ")
            print(running_nodes)
        elif user_input == "8":
            nodeID = input("Source nodeID: ")
            node_objects[int(nodeID)].ndn.conn.pause = True
            # add code to clear fib
        elif user_input == "9":
            nodeID = input("Source nodeID: ")
            node_objects[int(nodeID)].ndn.conn.pause = False
        elif user_input == "10":
            nodeID = input("")
            # code
        elif user_input == "11":
            nodeID = input("Source nodeID: ")
            privkey, pubkey = CryptoLayer.exportKey(node_objects[int(nodeID)].ndn.privatekey, node_objects[int(nodeID)].ndn.publickey)
            print(privkey)
            print(pubkey)
        elif user_input == "12":
            exit()


if __name__ == "__main__":
    main()